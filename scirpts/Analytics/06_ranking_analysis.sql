/*
===============================================================================
Ranking Analysis
===============================================================================
Purpose:
    - To rank items (e.g., products, customers) based on performance or other metrics.
    - To identify top performers or laggards.

SQL Functions Used:
    - Window Ranking Functions: RANK(), DENSE_RANK(), ROW_NUMBER()  --> Assign ranks based on a metric
    - Clauses: GROUP BY, ORDER BY, TOP
===============================================================================
*/

-- Which 5 products are generating the highest revenue?
-- Simple Ranking using TOP
SELECT TOP 5
    p.product_name,                   -- Name of the product
    SUM(f.sales_amount) AS total_revenue  -- Total revenue generated by the product
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p        -- Join to get product names
    ON p.product_key = f.product_key
GROUP BY p.product_name               -- Aggregate revenue by product
ORDER BY total_revenue DESC;          -- Sort descending to get highest revenue first

-- Complex but flexible ranking using Window Functions
SELECT *
FROM (
    SELECT
        p.product_name,
        SUM(f.sales_amount) AS total_revenue,
        RANK() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products  -- Assign rank based on revenue
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_products p
        ON p.product_key = f.product_key
    GROUP BY p.product_name
) AS ranked_products
WHERE rank_products <= 5;             -- Filter to top 5 products

-- What are the 5 worst-performing products in terms of sales?
SELECT TOP 5
    p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
    ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue;               -- Sort ascending to get lowest revenue first

-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
    c.customer_key,                    -- Unique customer ID
    c.first_name,                      -- Customer's first name
    c.last_name,                       -- Customer's last name
    SUM(f.sales_amount) AS total_revenue  -- Total revenue generated by the customer
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c        -- Join to get customer names
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;          -- Sort descending to get highest revenue first

-- The 3 customers with the fewest orders placed
SELECT TOP 3
    c.customer_key,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT order_number) AS total_orders  -- Count of unique orders per customer
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_orders;                -- Sort ascending to get customers with fewest orders
