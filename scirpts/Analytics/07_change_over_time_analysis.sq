/*
===============================================================================
Change Over Time Analysis
===============================================================================
Purpose:
    - To track trends, growth, and changes in key metrics over time.
    - For time-series analysis and identifying seasonality.
    - To measure growth or decline over specific periods.

SQL Functions Used:
    - Date Functions: DATEPART(), DATETRUNC(), FORMAT()  --> Extract or format date parts
    - Aggregate Functions: SUM(), COUNT(), AVG()        --> Summarize key metrics
===============================================================================
*/

-- Analyse sales performance over time using YEAR() and MONTH()
SELECT
    YEAR(order_date) AS order_year,               -- Extract year from order_date
    MONTH(order_date) AS order_month,             -- Extract month number from order_date
    SUM(sales_amount) AS total_sales,            -- Total sales in that year/month
    COUNT(DISTINCT customer_key) AS total_customers,  -- Unique customers in that period
    SUM(quantity) AS total_quantity              -- Total items sold
FROM gold.fact_sales
WHERE order_date IS NOT NULL                     -- Ensure we only consider valid dates
GROUP BY YEAR(order_date), MONTH(order_date)     -- Aggregate by year and month
ORDER BY YEAR(order_date), MONTH(order_date);    -- Sort chronologically

-- Analyse sales performance over time using DATETRUNC() (truncates to start of month)
SELECT
    DATETRUNC(month, order_date) AS order_date,   -- First day of the month for grouping
    SUM(sales_amount) AS total_sales,
    COUNT(DISTINCT customer_key) AS total_customers,
    SUM(quantity) AS total_quantity
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY DATETRUNC(month, order_date)
ORDER BY DATETRUNC(month, order_date);

-- Analyse sales performance using FORMAT() to display readable month-year labels
SELECT
    FORMAT(order_date, 'yyyy-MMM') AS order_date, -- Format as Year-Month (e.g., 2025-Sep)
    SUM(sales_amount) AS total_sales,
    COUNT(DISTINCT customer_key) AS total_customers,
    SUM(quantity) AS total_quantity
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY FORMAT(order_date, 'yyyy-MMM')         -- Group by formatted month-year
ORDER BY FORMAT(order_date, 'yyyy-MMM');        -- Sort chronologically
